
m328_pulse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000196  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000022c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000006c  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000010a  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000008e  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000128  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c4  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	sei();										// Activate global interrupts
}
 
int main(void)
{
	DDRB |= ((1 << PD6)|(1 << PB5));						// Set OC0A as an output
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	80 66       	ori	r24, 0x60	; 96
  aa:	84 b9       	out	0x04, r24	; 4
volatile unsigned char pulseCount = 10;
unsigned char read;

static inline void  SystemInit(void)
{
	cli();										// Deactivate global interrupts
  ac:	f8 94       	cli
	//MCUCR |= ((1<<ISC01) |(0<<ISC00));			// INT0 is falling edge
	//PCMSK |= ((1<<PCINT3)|(0<<PCINT4));		// Pin Change Enable Mask PB2 or PB3
	//GIMSK |= ((1<<PCIE)  |(1<<INT0));			// Enable external interrupts INT0 & PCINT
	
	TCCR1A |= ((0 << COM1A1) | (1 << COM1A0)); //Toggle OC0A/OC0B on Compare Match
  ae:	80 91 80 00 	lds	r24, 0x0080
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 93 80 00 	sts	0x0080, r24
	OCR1A = 2; 								// Cycles for interrupt @50ms @4.8MHz
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	90 93 89 00 	sts	0x0089, r25
  c0:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);					// Enable timer compare interrupt
  c4:	80 91 6f 00 	lds	r24, 0x006F
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 93 6f 00 	sts	0x006F, r24
	sei();										// Activate global interrupts
  ce:	78 94       	sei
 
int main(void)
{
	DDRB |= ((1 << PD6)|(1 << PB5));						// Set OC0A as an output
	SystemInit();
	START_TIMER1;
  d0:	80 91 81 00 	lds	r24, 0x0081
  d4:	8f 60       	ori	r24, 0x0F	; 15
  d6:	80 93 81 00 	sts	0x0081, r24
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x34>

000000dc <__vector_11>:
	while(1) { }								// Don't do anything in main
}

ISR(TIMER1_COMPA_vect)							// Interrupt Service Routine
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	//contor++;
	PORTB ^= _BV(PB5);
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	90 e2       	ldi	r25, 0x20	; 32
  ee:	89 27       	eor	r24, r25
  f0:	85 b9       	out	0x05, r24	; 5
if (contor == pulseCount)						//Stops the timer on specified no of pulses
  f2:	90 91 02 01 	lds	r25, 0x0102
  f6:	80 91 00 01 	lds	r24, 0x0100
  fa:	98 17       	cp	r25, r24
  fc:	41 f4       	brne	.+16     	; 0x10e <__vector_11+0x32>
   {
	STOP_TIMER1;
  fe:	80 91 81 00 	lds	r24, 0x0081
 102:	10 92 81 00 	sts	0x0081, r1
	contor = 0;
 106:	10 92 02 01 	sts	0x0102, r1
	pulseCount = 0;
 10a:	10 92 00 01 	sts	0x0100, r1
   }
   return;
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__vector_1>:

ISR (INT0_vect)									// Interrupt Service Routine INT0
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	8f 93       	push	r24
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	pulseCount = 6;
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	80 93 00 01 	sts	0x0100, r24
	CLEAR_TIMER1;
 132:	10 92 85 00 	sts	0x0085, r1
 136:	10 92 84 00 	sts	0x0084, r1
	START_TIMER1;
 13a:	e1 e8       	ldi	r30, 0x81	; 129
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	8f 60       	ori	r24, 0x0F	; 15
 142:	80 83       	st	Z, r24
	return;
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_3>:

ISR(PCINT0_vect)								// Interrupt Service Routine PCINT0
{
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
	read  = PIN3;
 160:	83 e0       	ldi	r24, 0x03	; 3
 162:	80 93 03 01 	sts	0x0103, r24
if (bit_is_clear(read,3))						// This is falling edge
 166:	80 91 03 01 	lds	r24, 0x0103
 16a:	83 fd       	sbrc	r24, 3
 16c:	0c c0       	rjmp	.+24     	; 0x186 <__vector_3+0x32>
   {
	pulseCount = 2;
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	80 93 00 01 	sts	0x0100, r24
	CLEAR_TIMER1;
 174:	10 92 85 00 	sts	0x0085, r1
 178:	10 92 84 00 	sts	0x0084, r1
	START_TIMER1;
 17c:	80 91 81 00 	lds	r24, 0x0081
 180:	8f 60       	ori	r24, 0x0F	; 15
 182:	80 93 81 00 	sts	0x0081, r24
   }
	return;
}
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
