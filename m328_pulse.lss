
m328_pulse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000166  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000001fc  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000006c  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000010a  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000008e  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000128  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c4  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	sei();										// Activate global interrupts
}
 
int main(void)
{
	DDRB |= ((1 << PD6)|(1 << PB5));						// Set OC0A as an output
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	80 66       	ori	r24, 0x60	; 96
  aa:	84 b9       	out	0x04, r24	; 4
volatile unsigned char pulseCount = 10;
unsigned char read;

static inline void  SystemInit(void)
{
	cli();										// Deactivate global interrupts
  ac:	f8 94       	cli
	//MCUCR |= ((1<<ISC01) |(0<<ISC00));			// INT0 is falling edge
	//PCMSK |= ((1<<PCINT3)|(0<<PCINT4));		// Pin Change Enable Mask PB2 or PB3
	//GIMSK |= ((1<<PCIE)  |(1<<INT0));			// Enable external interrupts INT0 & PCINT
	
	TCCR0A |= ((1 << WGM01)); //Toggle OC0A/OC0B on Compare Match
  ae:	84 b5       	in	r24, 0x24	; 36
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	84 bd       	out	0x24, r24	; 36
	OCR0A = 1; 								// Cycles for interrupt @50ms @4.8MHz
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);					// Enable timer compare interrupt
  b8:	80 91 6e 00 	lds	r24, 0x006E
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 93 6e 00 	sts	0x006E, r24
	sei();										// Activate global interrupts
  c2:	78 94       	sei
 
int main(void)
{
	DDRB |= ((1 << PD6)|(1 << PB5));						// Set OC0A as an output
	SystemInit();
	START_TIMER0;
  c4:	85 b5       	in	r24, 0x25	; 37
  c6:	86 60       	ori	r24, 0x06	; 6
  c8:	85 bd       	out	0x25, r24	; 37
  ca:	ff cf       	rjmp	.-2      	; 0xca <main+0x24>

000000cc <__vector_14>:
	while(1) { }								// Don't do anything in main
}

ISR(TIMER0_COMPA_vect)							// Interrupt Service Routine
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
	//contor++;
	PORTB ^= _BV(PB5);
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	90 e2       	ldi	r25, 0x20	; 32
  de:	89 27       	eor	r24, r25
  e0:	85 b9       	out	0x05, r24	; 5
if (contor == pulseCount)						//Stops the timer on specified no of pulses
  e2:	90 91 02 01 	lds	r25, 0x0102
  e6:	80 91 00 01 	lds	r24, 0x0100
  ea:	98 17       	cp	r25, r24
  ec:	31 f4       	brne	.+12     	; 0xfa <__vector_14+0x2e>
   {
	STOP_TIMER0;
  ee:	85 b5       	in	r24, 0x25	; 37
  f0:	15 bc       	out	0x25, r1	; 37
	contor = 0;
  f2:	10 92 02 01 	sts	0x0102, r1
	pulseCount = 0;
  f6:	10 92 00 01 	sts	0x0100, r1
   }
   return;
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_1>:

ISR (INT0_vect)									// Interrupt Service Routine INT0
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
	pulseCount = 6;
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	80 93 00 01 	sts	0x0100, r24
	CLEAR_TIMER0;
 11a:	16 bc       	out	0x26, r1	; 38
	START_TIMER0;
 11c:	85 b5       	in	r24, 0x25	; 37
 11e:	86 60       	ori	r24, 0x06	; 6
 120:	85 bd       	out	0x25, r24	; 37
	return;
}
 122:	8f 91       	pop	r24
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <__vector_3>:

ISR(PCINT0_vect)								// Interrupt Service Routine PCINT0
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
	read  = PIN3;
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	80 93 03 01 	sts	0x0103, r24
if (bit_is_clear(read,3))						// This is falling edge
 140:	80 91 03 01 	lds	r24, 0x0103
 144:	83 fd       	sbrc	r24, 3
 146:	07 c0       	rjmp	.+14     	; 0x156 <__vector_3+0x28>
   {
	pulseCount = 2;
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	80 93 00 01 	sts	0x0100, r24
	CLEAR_TIMER0;
 14e:	16 bc       	out	0x26, r1	; 38
	START_TIMER0;
 150:	85 b5       	in	r24, 0x25	; 37
 152:	86 60       	ori	r24, 0x06	; 6
 154:	85 bd       	out	0x25, r24	; 37
   }
	return;
}
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
